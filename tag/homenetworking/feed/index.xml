<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>homenetworking &#8211; Nam Vu Personal Site</title>
	<atom:link href="/tag/homenetworking/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Powered by Google Cloud Compute</description>
	<lastBuildDate>Tue, 29 Jun 2021 14:14:07 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.3.1</generator>

<image>
	<url>/wp-content/uploads/2018/12/cropped-namvu_512-150x150.png</url>
	<title>homenetworking &#8211; Nam Vu Personal Site</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Integrating Jellyfin with Heimdall: just what the heck is the &#8216;Password (secret token)&#8217;?</title>
		<link>/2021/04/integrating-jellyfin-with-heimdall-just-what-the-heck-is-the-password-secret-token/</link>
					<comments>/2021/04/integrating-jellyfin-with-heimdall-just-what-the-heck-is-the-password-secret-token/#comments</comments>
		
		<dc:creator><![CDATA[Nam Vũ]]></dc:creator>
		<pubDate>Thu, 15 Apr 2021 09:03:35 +0000</pubDate>
				<category><![CDATA[Tips & Tricks]]></category>
		<category><![CDATA[Home Networking]]></category>
		<category><![CDATA[api key]]></category>
		<category><![CDATA[heimdall]]></category>
		<category><![CDATA[homenetworking]]></category>
		<category><![CDATA[jellyfin]]></category>
		<category><![CDATA[jellyfin heimdall integration]]></category>
		<category><![CDATA[password]]></category>
		<category><![CDATA[secret token]]></category>
		<guid isPermaLink="false">/?p=14962</guid>

					<description><![CDATA[So you&#8217;re probably in the process of integrating Jellyfin with Heimdall, and you&#8217;re stumped by this little field in the Add application screen in Heimdall: Just what the heck are [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>So you&#8217;re probably in the process of integrating <a href="https://jellyfin.org/" data-type="URL" data-id="https://jellyfin.org/" target="_blank" rel="noreferrer noopener">Jellyfin </a>with <a href="https://heimdall.site/" data-type="URL" data-id="https://heimdall.site/" target="_blank" rel="noreferrer noopener">Heimdall</a>, and you&#8217;re stumped by this little field in the Add application screen in Heimdall:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" fetchpriority="high" width="1004" height="961" src="/wp-content/uploads/2021/04/image-4.png" alt="image 4" class="wp-image-14964" srcset="/wp-content/uploads/2021/04/image-4.png 1004w, /wp-content/uploads/2021/04/image-4-300x287.png 300w, /wp-content/uploads/2021/04/image-4-768x735.png 768w, /wp-content/uploads/2021/04/image-4-52x50.png 52w, /wp-content/uploads/2021/04/image-4-650x622.png 650w, /wp-content/uploads/2021/04/image-4-1000x957.png 1000w, /wp-content/uploads/2021/04/image-4-50x48.png 50w" sizes="(max-width: 1004px) 100vw, 1004px" title="Integrating Jellyfin with Heimdall: just what the heck is the &#039;Password (secret token)&#039;? 1"></figure></div>



<p>Just what the heck are we supposed to put in there? Neither the username nor password of my Jellyfin account works here, just what the heck is this &#8216;Password (Secret token)&#8217; thing that Heimdall is asking for?</p>



<p>The more tech savvy among you probably have already figured it out, but if you&#8217;re an idiot like me, you&#8217;re gonna waste a few rage inducing hours searching for it on the Internet to no avail, nobody on the Interweb seems to know what it is. Well I figured it out, and I&#8217;m gonna tell you.</p>



<span id="more-14962"></span>



<p>It&#8217;s the friggin&#8217; <strong>API KEY</strong>!</p>



<p>Yep, I don&#8217;t know who&#8217;s responsible for the wording in Heimdall but if I know he&#8217;s definitely not getting invited to my birthday party. </p>



<p>If you want the user to input the API Key, just say API Key.</p>



<p>Not &#8216;Password&#8217;</p>



<p>Not &#8216;Secret Token&#8217;</p>



<p><strong>API Fucking Key!</strong></p>



<p>To make matter worse, there&#8217;s no guide or even a simple reddit post that point you to where you can obtain such key. Lucky for you, I went through that for you.</p>



<p>In Jellyfin just go to <strong>Dashboard > Advanced > API Keys</strong>, click on the little <strong>(+)</strong> icon, put whatever name you want (mine just says Heimdall) and there you have it.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" width="720" height="723" src="/wp-content/uploads/2021/04/image-6.png" alt="image 6" class="wp-image-14966" srcset="/wp-content/uploads/2021/04/image-6.png 720w, /wp-content/uploads/2021/04/image-6-300x300.png 300w, /wp-content/uploads/2021/04/image-6-150x150.png 150w, /wp-content/uploads/2021/04/image-6-50x50.png 50w, /wp-content/uploads/2021/04/image-6-650x653.png 650w" sizes="(max-width: 720px) 100vw, 720px" title="Integrating Jellyfin with Heimdall: just what the heck is the &#039;Password (secret token)&#039;? 2"></figure></div>



<p>Copy that key and paste that into Heimdall&#8217;s Add Application screen, right into that so called &#8216;Password&#8217; field, along with other information and it should now work.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" width="316" height="115" src="/wp-content/uploads/2021/04/image-8.png" alt="image 8" class="wp-image-14968" srcset="/wp-content/uploads/2021/04/image-8.png 316w, /wp-content/uploads/2021/04/image-8-300x109.png 300w, /wp-content/uploads/2021/04/image-8-137x50.png 137w, /wp-content/uploads/2021/04/image-8-50x18.png 50w" sizes="(max-width: 316px) 100vw, 316px" title="Integrating Jellyfin with Heimdall: just what the heck is the &#039;Password (secret token)&#039;? 3"></figure></div>



<p><em>Bonus tip: for the &#8216;Stats to show&#8217; option, you can select multiple stats by holding down the Shift key.</em></p>
]]></content:encoded>
					
					<wfw:commentRss>/2021/04/integrating-jellyfin-with-heimdall-just-what-the-heck-is-the-password-secret-token/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Prettify your qBittorrent WebUI</title>
		<link>/2021/04/prettify-your-qbittorrent-webui/</link>
					<comments>/2021/04/prettify-your-qbittorrent-webui/#respond</comments>
		
		<dc:creator><![CDATA[Nam Vũ]]></dc:creator>
		<pubDate>Tue, 13 Apr 2021 00:51:01 +0000</pubDate>
				<category><![CDATA[DIY]]></category>
		<category><![CDATA[Randomness]]></category>
		<category><![CDATA[Tips & Tricks]]></category>
		<category><![CDATA[homenetworking]]></category>
		<category><![CDATA[homeserver]]></category>
		<category><![CDATA[prettifying]]></category>
		<category><![CDATA[pretty]]></category>
		<category><![CDATA[reskin]]></category>
		<category><![CDATA[torrent]]></category>
		<category><![CDATA[webui]]></category>
		<guid isPermaLink="false">/?p=14947</guid>

					<description><![CDATA[I absolutely love qBittorrent but as an UI Designer, one thing that doesn&#8217;t sit well with me is its 1990-esque web interface. While they do allow you to load your [&#8230;]]]></description>
										<content:encoded><![CDATA[
<figure class="ghostkit-image-compare ghostkit-custom-2e9bUg ghostkit-custom-2e9bUg ghostkit-custom-2e9bUg ghostkit-custom-2e9bUg"><div class="ghostkit-image-compare-images"><div class="ghostkit-image-compare-image-before"><img decoding="async" loading="lazy" src="/wp-content/uploads/2021/04/qbit1-1024x572.png" alt="qbit1" class="wp-image-14950" width="1024" height="572" srcset="/wp-content/uploads/2021/04/qbit1-1024x572.png 1024w, /wp-content/uploads/2021/04/qbit1-300x167.png 300w, /wp-content/uploads/2021/04/qbit1-768x429.png 768w, /wp-content/uploads/2021/04/qbit1-90x50.png 90w, /wp-content/uploads/2021/04/qbit1-650x363.png 650w, /wp-content/uploads/2021/04/qbit1-1000x558.png 1000w, /wp-content/uploads/2021/04/qbit1-50x28.png 50w, /wp-content/uploads/2021/04/qbit1.png 1467w" sizes="(max-width: 1024px) 100vw, 1024px" title="Prettify your qBittorrent WebUI 4"></div><div class="ghostkit-image-compare-image-after"><img decoding="async" loading="lazy" src="/wp-content/uploads/2021/04/qbit2-1024x571.png" alt="qbit2" class="wp-image-14951" width="1024" height="571" srcset="/wp-content/uploads/2021/04/qbit2-1024x571.png 1024w, /wp-content/uploads/2021/04/qbit2-300x167.png 300w, /wp-content/uploads/2021/04/qbit2-768x428.png 768w, /wp-content/uploads/2021/04/qbit2-90x50.png 90w, /wp-content/uploads/2021/04/qbit2-650x362.png 650w, /wp-content/uploads/2021/04/qbit2-1000x558.png 1000w, /wp-content/uploads/2021/04/qbit2-50x28.png 50w, /wp-content/uploads/2021/04/qbit2.png 1469w" sizes="(max-width: 1024px) 100vw, 1024px" title="Prettify your qBittorrent WebUI 5"></div><div class="ghostkit-image-compare-images-divider"><div class="ghostkit-image-compare-images-divider-button-arrow-left"><svg class="ghostkit-svg-icon" width="24" height="24" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.7803 17.7803C14.4874 18.0732 14.0126 18.0732 13.7197 17.7803L8.4697 12.5303C8.1768 12.2374 8.1768 11.7626 8.4697 11.4697L13.7197 6.21967C14.0126 5.92678 14.4874 5.92678 14.7803 6.21967C15.0732 6.51256 15.0732 6.98744 14.7803 7.28033L10.0607 12L14.7803 16.7197C15.0732 17.0126 15.0732 17.4874 14.7803 17.7803Z" fill="currentColor"></path></svg></div><div class="ghostkit-image-compare-images-divider-button-arrow-right"><svg class="ghostkit-svg-icon" width="24" height="24" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.21967 6.2197C9.51256 5.9268 9.98744 5.9268 10.2803 6.2197L15.5303 11.4697C15.8232 11.7626 15.8232 12.2374 15.5303 12.5303L10.2803 17.7803C9.98744 18.0732 9.51256 18.0732 9.21967 17.7803C8.92678 17.4874 8.92678 17.0126 9.21967 16.7197L13.9393 12L9.21967 7.2803C8.92678 6.9874 8.92678 6.5126 9.21967 6.2197Z" fill="currentColor"></path></svg></div></div></div></figure>



<p>I absolutely love qBittorrent but as an UI Designer, one thing that doesn&#8217;t sit well with me is its 1990-esque web interface. While they do allow you to load your custom CSS, there wasn&#8217;t a lot you could do with it beyond changing a few colors, and even the most downloaded themes in the community still only looks marginally better. </p>



<span id="more-14947"></span>



<p>Lucky for us, I&#8217;m not the only person on the planet to feel that way, the existence of <a rel="noreferrer noopener" href="https://github.com/jesec/flood" target="_blank">Flood </a>can attest to that. Now let&#8217;s get one thing out of the way, Flood is NOT a theme. It&#8217;s actually a microservice that allows you to communicate with various torrent clients (namely <a href="https://github.com/rakshasa/rtorrent" target="_blank" rel="noreferrer noopener">rTorrent</a>, qBittorrent 4.1+ and <a href="https://github.com/transmission/transmission" target="_blank" rel="noreferrer noopener">Transmission</a>) and serves an alternative web UI which just happen to look great. This means that in my case you&#8217;d need a qBittorrent web UI service already up and running for Flood to work. A bit clunky yes but totally worth it for those who prefer eyecandiness like your truly.</p>



<p>So here&#8217;s how I set it up on my little Mac Mini server (this is the non-Docker way, I am aware you can achieve all of these with dockers but after spending a few rage inducing hours on it I figure it&#8217;s just easier to run everything natively)</p>



<p>First of all, you&#8217;ll need a working qBittorrent web UI service running. This can be done by simply opening qBittorrent, go to Options &gt; Web UI and click on the checkbox to enable it. Take note of the IP address and port because Flood is going to ask for it later (if you put an asterisk* as your IP, it means you&#8217;re using <code data-enlighter-language="generic" class="EnlighterJSRAW">127.0.0.1</code> or <code data-enlighter-language="generic" class="EnlighterJSRAW">localhost</code>)</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="524" src="/wp-content/uploads/2021/04/image-2-1024x524.png" alt="image 2" class="wp-image-14955" srcset="/wp-content/uploads/2021/04/image-2-1024x524.png 1024w, /wp-content/uploads/2021/04/image-2-300x154.png 300w, /wp-content/uploads/2021/04/image-2-768x393.png 768w, /wp-content/uploads/2021/04/image-2-98x50.png 98w, /wp-content/uploads/2021/04/image-2-650x333.png 650w, /wp-content/uploads/2021/04/image-2-1000x512.png 1000w, /wp-content/uploads/2021/04/image-2-50x26.png 50w, /wp-content/uploads/2021/04/image-2.png 1330w" sizes="(max-width: 1024px) 100vw, 1024px" title="Prettify your qBittorrent WebUI 6"><figcaption>Prettify your qBittorrent WebUI 7</figcaption></figure>



<p>Next up, get node installed on your system, on OS X if you have <a rel="noreferrer noopener" href="https://brew.sh/" data-type="URL" data-id="https://brew.sh/" target="_blank">homebrew </a>installed, you can just simply execute <code data-enlighter-language="generic" class="EnlighterJSRAW">brew install node</code> from the terminal. It&#8217;s going to take a while, especially if you have a shitty 2011-esque Mac Mini like mine so grab some coffee.</p>



<p>After you have node up and running, it&#8217;s time to install Flood by running <code data-enlighter-language="generic" class="EnlighterJSRAW">npm install flood -g</code>, after that you can run <code data-enlighter-language="generic" class="EnlighterJSRAW">npm flood</code> to start the service but before we do that I strongly advise you run it with pm2 just so Flood doesn&#8217;t close as soon as you close the terminal.</p>



<p>Install pm2 with <code data-enlighter-language="generic" class="EnlighterJSRAW">npm install pm2 -g</code></p>



<p>Now run <code data-enlighter-language="generic" class="EnlighterJSRAW">pm2 start flood</code></p>



<p>That&#8217;s it, not you have flood running in the background, you can go to the web admin interface which should be located on localhost:3000 and complete the setup there, it will ask for your qBittorrent crendentials so make sure you have every setup correctly in qBittorrent options.</p>



<h3 class="has-black-color has-text-color wp-block-heading">TL;DR</h3>



<p>To get Flood running on an existing OS X installation:</p>



<pre class="wp-block-code"><code>brew install node</code></pre>



<pre class="wp-block-code"><code>npm install flood -g</code></pre>



<pre class="wp-block-code"><code>npm install pm2 -g</code></pre>



<pre class="wp-block-code"><code>pm2 start flood</code></pre>



<p><strong>Update 06/12/2021:</strong> It has came to my attention that by default, flood is set to be only accessible locally. If you want to be able to access it remotely you&#8217;ll need to pass a few more arguments to the pm2 startup command, something like this:</p>



<pre class="wp-block-code"><code>pm2 start flood -- --host 0.0.0.0 --port 3000</code></pre>



<p>Specifically, you&#8217;ll need to define your hostname IP address and the port it will run on.</p>



<p data-ghostkit-sr="fade">That&#8217;s all, folks. Now you can setup a reverse proxy to access Flood interface remotely on your custom domain or DDNS, I will have another post regarding that soon.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2021/04/prettify-your-qbittorrent-webui/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
